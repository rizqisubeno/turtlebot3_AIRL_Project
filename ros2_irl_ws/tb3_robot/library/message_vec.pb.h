// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_vec.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fvec_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fvec_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fvec_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fvec_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fvec_2eproto;
class robot_msg;
struct robot_msgDefaultTypeInternal;
extern robot_msgDefaultTypeInternal _robot_msg_default_instance_;
class start_agent_msg;
struct start_agent_msgDefaultTypeInternal;
extern start_agent_msgDefaultTypeInternal _start_agent_msg_default_instance_;
class step_agent_msg;
struct step_agent_msgDefaultTypeInternal;
extern step_agent_msgDefaultTypeInternal _step_agent_msg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::robot_msg* Arena::CreateMaybeMessage<::robot_msg>(Arena*);
template<> ::start_agent_msg* Arena::CreateMaybeMessage<::start_agent_msg>(Arena*);
template<> ::step_agent_msg* Arena::CreateMaybeMessage<::step_agent_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class start_agent_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:start_agent_msg) */ {
 public:
  inline start_agent_msg() : start_agent_msg(nullptr) {}
  ~start_agent_msg() override;
  explicit PROTOBUF_CONSTEXPR start_agent_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  start_agent_msg(const start_agent_msg& from);
  start_agent_msg(start_agent_msg&& from) noexcept
    : start_agent_msg() {
    *this = ::std::move(from);
  }

  inline start_agent_msg& operator=(const start_agent_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline start_agent_msg& operator=(start_agent_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const start_agent_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const start_agent_msg* internal_default_instance() {
    return reinterpret_cast<const start_agent_msg*>(
               &_start_agent_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(start_agent_msg& a, start_agent_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(start_agent_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(start_agent_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  start_agent_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<start_agent_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const start_agent_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const start_agent_msg& from) {
    start_agent_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(start_agent_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "start_agent_msg";
  }
  protected:
  explicit start_agent_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentStateFieldNumber = 2,
    kIdxFieldNumber = 1,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kTargetXFieldNumber = 6,
    kTargetYFieldNumber = 7,
    kTargetZFieldNumber = 8,
    kAngleFieldNumber = 9,
    kMaxStepsFieldNumber = 10,
    kLidarForStateFieldNumber = 11,
  };
  // optional string agent_state = 2;
  bool has_agent_state() const;
  private:
  bool _internal_has_agent_state() const;
  public:
  void clear_agent_state();
  const std::string& agent_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agent_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agent_state();
  PROTOBUF_NODISCARD std::string* release_agent_state();
  void set_allocated_agent_state(std::string* agent_state);
  private:
  const std::string& _internal_agent_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agent_state(const std::string& value);
  std::string* _internal_mutable_agent_state();
  public:

  // optional int64 idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  int64_t idx() const;
  void set_idx(int64_t value);
  private:
  int64_t _internal_idx() const;
  void _internal_set_idx(int64_t value);
  public:

  // optional float x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 5;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float target_x = 6;
  bool has_target_x() const;
  private:
  bool _internal_has_target_x() const;
  public:
  void clear_target_x();
  float target_x() const;
  void set_target_x(float value);
  private:
  float _internal_target_x() const;
  void _internal_set_target_x(float value);
  public:

  // optional float target_y = 7;
  bool has_target_y() const;
  private:
  bool _internal_has_target_y() const;
  public:
  void clear_target_y();
  float target_y() const;
  void set_target_y(float value);
  private:
  float _internal_target_y() const;
  void _internal_set_target_y(float value);
  public:

  // optional float target_z = 8;
  bool has_target_z() const;
  private:
  bool _internal_has_target_z() const;
  public:
  void clear_target_z();
  float target_z() const;
  void set_target_z(float value);
  private:
  float _internal_target_z() const;
  void _internal_set_target_z(float value);
  public:

  // optional float angle = 9;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // optional int32 max_steps = 10;
  bool has_max_steps() const;
  private:
  bool _internal_has_max_steps() const;
  public:
  void clear_max_steps();
  int32_t max_steps() const;
  void set_max_steps(int32_t value);
  private:
  int32_t _internal_max_steps() const;
  void _internal_set_max_steps(int32_t value);
  public:

  // optional int32 lidar_for_state = 11;
  bool has_lidar_for_state() const;
  private:
  bool _internal_has_lidar_for_state() const;
  public:
  void clear_lidar_for_state();
  int32_t lidar_for_state() const;
  void set_lidar_for_state(int32_t value);
  private:
  int32_t _internal_lidar_for_state() const;
  void _internal_set_lidar_for_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:start_agent_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_state_;
    int64_t idx_;
    float x_;
    float y_;
    float z_;
    float target_x_;
    float target_y_;
    float target_z_;
    float angle_;
    int32_t max_steps_;
    int32_t lidar_for_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fvec_2eproto;
};
// -------------------------------------------------------------------

class step_agent_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:step_agent_msg) */ {
 public:
  inline step_agent_msg() : step_agent_msg(nullptr) {}
  ~step_agent_msg() override;
  explicit PROTOBUF_CONSTEXPR step_agent_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  step_agent_msg(const step_agent_msg& from);
  step_agent_msg(step_agent_msg&& from) noexcept
    : step_agent_msg() {
    *this = ::std::move(from);
  }

  inline step_agent_msg& operator=(const step_agent_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline step_agent_msg& operator=(step_agent_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const step_agent_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const step_agent_msg* internal_default_instance() {
    return reinterpret_cast<const step_agent_msg*>(
               &_step_agent_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(step_agent_msg& a, step_agent_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(step_agent_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(step_agent_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  step_agent_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<step_agent_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const step_agent_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const step_agent_msg& from) {
    step_agent_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(step_agent_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "step_agent_msg";
  }
  protected:
  explicit step_agent_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxFieldNumber = 1,
    kAct0FieldNumber = 2,
    kAct1FieldNumber = 3,
  };
  // optional int64 idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  int64_t idx() const;
  void set_idx(int64_t value);
  private:
  int64_t _internal_idx() const;
  void _internal_set_idx(int64_t value);
  public:

  // optional float act_0 = 2;
  bool has_act_0() const;
  private:
  bool _internal_has_act_0() const;
  public:
  void clear_act_0();
  float act_0() const;
  void set_act_0(float value);
  private:
  float _internal_act_0() const;
  void _internal_set_act_0(float value);
  public:

  // optional float act_1 = 3;
  bool has_act_1() const;
  private:
  bool _internal_has_act_1() const;
  public:
  void clear_act_1();
  float act_1() const;
  void set_act_1(float value);
  private:
  float _internal_act_1() const;
  void _internal_set_act_1(float value);
  public:

  // @@protoc_insertion_point(class_scope:step_agent_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t idx_;
    float act_0_;
    float act_1_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fvec_2eproto;
};
// -------------------------------------------------------------------

class robot_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_msg) */ {
 public:
  inline robot_msg() : robot_msg(nullptr) {}
  ~robot_msg() override;
  explicit PROTOBUF_CONSTEXPR robot_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  robot_msg(const robot_msg& from);
  robot_msg(robot_msg&& from) noexcept
    : robot_msg() {
    *this = ::std::move(from);
  }

  inline robot_msg& operator=(const robot_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline robot_msg& operator=(robot_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const robot_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const robot_msg* internal_default_instance() {
    return reinterpret_cast<const robot_msg*>(
               &_robot_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(robot_msg& a, robot_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(robot_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(robot_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  robot_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<robot_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const robot_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const robot_msg& from) {
    robot_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(robot_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_msg";
  }
  protected:
  explicit robot_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLidarDataFieldNumber = 2,
    kIdxFieldNumber = 1,
    kDistanceLengthFieldNumber = 3,
    kAngularLengthFieldNumber = 4,
  };
  // repeated float lidar_data = 2 [packed = true];
  int lidar_data_size() const;
  private:
  int _internal_lidar_data_size() const;
  public:
  void clear_lidar_data();
  private:
  float _internal_lidar_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_lidar_data() const;
  void _internal_add_lidar_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_lidar_data();
  public:
  float lidar_data(int index) const;
  void set_lidar_data(int index, float value);
  void add_lidar_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lidar_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lidar_data();

  // optional int64 idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  int64_t idx() const;
  void set_idx(int64_t value);
  private:
  int64_t _internal_idx() const;
  void _internal_set_idx(int64_t value);
  public:

  // optional float distance_length = 3;
  bool has_distance_length() const;
  private:
  bool _internal_has_distance_length() const;
  public:
  void clear_distance_length();
  float distance_length() const;
  void set_distance_length(float value);
  private:
  float _internal_distance_length() const;
  void _internal_set_distance_length(float value);
  public:

  // optional float angular_length = 4;
  bool has_angular_length() const;
  private:
  bool _internal_has_angular_length() const;
  public:
  void clear_angular_length();
  float angular_length() const;
  void set_angular_length(float value);
  private:
  float _internal_angular_length() const;
  void _internal_set_angular_length(float value);
  public:

  // @@protoc_insertion_point(class_scope:robot_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lidar_data_;
    int64_t idx_;
    float distance_length_;
    float angular_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_5fvec_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// start_agent_msg

// optional int64 idx = 1;
inline bool start_agent_msg::_internal_has_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool start_agent_msg::has_idx() const {
  return _internal_has_idx();
}
inline void start_agent_msg::clear_idx() {
  _impl_.idx_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t start_agent_msg::_internal_idx() const {
  return _impl_.idx_;
}
inline int64_t start_agent_msg::idx() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.idx)
  return _internal_idx();
}
inline void start_agent_msg::_internal_set_idx(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.idx_ = value;
}
inline void start_agent_msg::set_idx(int64_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.idx)
}

// optional string agent_state = 2;
inline bool start_agent_msg::_internal_has_agent_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool start_agent_msg::has_agent_state() const {
  return _internal_has_agent_state();
}
inline void start_agent_msg::clear_agent_state() {
  _impl_.agent_state_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& start_agent_msg::agent_state() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.agent_state)
  return _internal_agent_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void start_agent_msg::set_agent_state(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.agent_state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:start_agent_msg.agent_state)
}
inline std::string* start_agent_msg::mutable_agent_state() {
  std::string* _s = _internal_mutable_agent_state();
  // @@protoc_insertion_point(field_mutable:start_agent_msg.agent_state)
  return _s;
}
inline const std::string& start_agent_msg::_internal_agent_state() const {
  return _impl_.agent_state_.Get();
}
inline void start_agent_msg::_internal_set_agent_state(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.agent_state_.Set(value, GetArenaForAllocation());
}
inline std::string* start_agent_msg::_internal_mutable_agent_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.agent_state_.Mutable(GetArenaForAllocation());
}
inline std::string* start_agent_msg::release_agent_state() {
  // @@protoc_insertion_point(field_release:start_agent_msg.agent_state)
  if (!_internal_has_agent_state()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.agent_state_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_state_.IsDefault()) {
    _impl_.agent_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void start_agent_msg::set_allocated_agent_state(std::string* agent_state) {
  if (agent_state != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.agent_state_.SetAllocated(agent_state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agent_state_.IsDefault()) {
    _impl_.agent_state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:start_agent_msg.agent_state)
}

// optional float x = 3;
inline bool start_agent_msg::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool start_agent_msg::has_x() const {
  return _internal_has_x();
}
inline void start_agent_msg::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float start_agent_msg::_internal_x() const {
  return _impl_.x_;
}
inline float start_agent_msg::x() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.x)
  return _internal_x();
}
inline void start_agent_msg::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.x_ = value;
}
inline void start_agent_msg::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.x)
}

// optional float y = 4;
inline bool start_agent_msg::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool start_agent_msg::has_y() const {
  return _internal_has_y();
}
inline void start_agent_msg::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float start_agent_msg::_internal_y() const {
  return _impl_.y_;
}
inline float start_agent_msg::y() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.y)
  return _internal_y();
}
inline void start_agent_msg::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.y_ = value;
}
inline void start_agent_msg::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.y)
}

// optional float z = 5;
inline bool start_agent_msg::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool start_agent_msg::has_z() const {
  return _internal_has_z();
}
inline void start_agent_msg::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float start_agent_msg::_internal_z() const {
  return _impl_.z_;
}
inline float start_agent_msg::z() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.z)
  return _internal_z();
}
inline void start_agent_msg::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.z_ = value;
}
inline void start_agent_msg::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.z)
}

// optional float target_x = 6;
inline bool start_agent_msg::_internal_has_target_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool start_agent_msg::has_target_x() const {
  return _internal_has_target_x();
}
inline void start_agent_msg::clear_target_x() {
  _impl_.target_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float start_agent_msg::_internal_target_x() const {
  return _impl_.target_x_;
}
inline float start_agent_msg::target_x() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.target_x)
  return _internal_target_x();
}
inline void start_agent_msg::_internal_set_target_x(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.target_x_ = value;
}
inline void start_agent_msg::set_target_x(float value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.target_x)
}

// optional float target_y = 7;
inline bool start_agent_msg::_internal_has_target_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool start_agent_msg::has_target_y() const {
  return _internal_has_target_y();
}
inline void start_agent_msg::clear_target_y() {
  _impl_.target_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float start_agent_msg::_internal_target_y() const {
  return _impl_.target_y_;
}
inline float start_agent_msg::target_y() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.target_y)
  return _internal_target_y();
}
inline void start_agent_msg::_internal_set_target_y(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.target_y_ = value;
}
inline void start_agent_msg::set_target_y(float value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.target_y)
}

// optional float target_z = 8;
inline bool start_agent_msg::_internal_has_target_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool start_agent_msg::has_target_z() const {
  return _internal_has_target_z();
}
inline void start_agent_msg::clear_target_z() {
  _impl_.target_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float start_agent_msg::_internal_target_z() const {
  return _impl_.target_z_;
}
inline float start_agent_msg::target_z() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.target_z)
  return _internal_target_z();
}
inline void start_agent_msg::_internal_set_target_z(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.target_z_ = value;
}
inline void start_agent_msg::set_target_z(float value) {
  _internal_set_target_z(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.target_z)
}

// optional float angle = 9;
inline bool start_agent_msg::_internal_has_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool start_agent_msg::has_angle() const {
  return _internal_has_angle();
}
inline void start_agent_msg::clear_angle() {
  _impl_.angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float start_agent_msg::_internal_angle() const {
  return _impl_.angle_;
}
inline float start_agent_msg::angle() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.angle)
  return _internal_angle();
}
inline void start_agent_msg::_internal_set_angle(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.angle_ = value;
}
inline void start_agent_msg::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.angle)
}

// optional int32 max_steps = 10;
inline bool start_agent_msg::_internal_has_max_steps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool start_agent_msg::has_max_steps() const {
  return _internal_has_max_steps();
}
inline void start_agent_msg::clear_max_steps() {
  _impl_.max_steps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t start_agent_msg::_internal_max_steps() const {
  return _impl_.max_steps_;
}
inline int32_t start_agent_msg::max_steps() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.max_steps)
  return _internal_max_steps();
}
inline void start_agent_msg::_internal_set_max_steps(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_steps_ = value;
}
inline void start_agent_msg::set_max_steps(int32_t value) {
  _internal_set_max_steps(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.max_steps)
}

// optional int32 lidar_for_state = 11;
inline bool start_agent_msg::_internal_has_lidar_for_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool start_agent_msg::has_lidar_for_state() const {
  return _internal_has_lidar_for_state();
}
inline void start_agent_msg::clear_lidar_for_state() {
  _impl_.lidar_for_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t start_agent_msg::_internal_lidar_for_state() const {
  return _impl_.lidar_for_state_;
}
inline int32_t start_agent_msg::lidar_for_state() const {
  // @@protoc_insertion_point(field_get:start_agent_msg.lidar_for_state)
  return _internal_lidar_for_state();
}
inline void start_agent_msg::_internal_set_lidar_for_state(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lidar_for_state_ = value;
}
inline void start_agent_msg::set_lidar_for_state(int32_t value) {
  _internal_set_lidar_for_state(value);
  // @@protoc_insertion_point(field_set:start_agent_msg.lidar_for_state)
}

// -------------------------------------------------------------------

// step_agent_msg

// optional int64 idx = 1;
inline bool step_agent_msg::_internal_has_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool step_agent_msg::has_idx() const {
  return _internal_has_idx();
}
inline void step_agent_msg::clear_idx() {
  _impl_.idx_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t step_agent_msg::_internal_idx() const {
  return _impl_.idx_;
}
inline int64_t step_agent_msg::idx() const {
  // @@protoc_insertion_point(field_get:step_agent_msg.idx)
  return _internal_idx();
}
inline void step_agent_msg::_internal_set_idx(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.idx_ = value;
}
inline void step_agent_msg::set_idx(int64_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:step_agent_msg.idx)
}

// optional float act_0 = 2;
inline bool step_agent_msg::_internal_has_act_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool step_agent_msg::has_act_0() const {
  return _internal_has_act_0();
}
inline void step_agent_msg::clear_act_0() {
  _impl_.act_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float step_agent_msg::_internal_act_0() const {
  return _impl_.act_0_;
}
inline float step_agent_msg::act_0() const {
  // @@protoc_insertion_point(field_get:step_agent_msg.act_0)
  return _internal_act_0();
}
inline void step_agent_msg::_internal_set_act_0(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.act_0_ = value;
}
inline void step_agent_msg::set_act_0(float value) {
  _internal_set_act_0(value);
  // @@protoc_insertion_point(field_set:step_agent_msg.act_0)
}

// optional float act_1 = 3;
inline bool step_agent_msg::_internal_has_act_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool step_agent_msg::has_act_1() const {
  return _internal_has_act_1();
}
inline void step_agent_msg::clear_act_1() {
  _impl_.act_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float step_agent_msg::_internal_act_1() const {
  return _impl_.act_1_;
}
inline float step_agent_msg::act_1() const {
  // @@protoc_insertion_point(field_get:step_agent_msg.act_1)
  return _internal_act_1();
}
inline void step_agent_msg::_internal_set_act_1(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.act_1_ = value;
}
inline void step_agent_msg::set_act_1(float value) {
  _internal_set_act_1(value);
  // @@protoc_insertion_point(field_set:step_agent_msg.act_1)
}

// -------------------------------------------------------------------

// robot_msg

// optional int64 idx = 1;
inline bool robot_msg::_internal_has_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool robot_msg::has_idx() const {
  return _internal_has_idx();
}
inline void robot_msg::clear_idx() {
  _impl_.idx_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t robot_msg::_internal_idx() const {
  return _impl_.idx_;
}
inline int64_t robot_msg::idx() const {
  // @@protoc_insertion_point(field_get:robot_msg.idx)
  return _internal_idx();
}
inline void robot_msg::_internal_set_idx(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.idx_ = value;
}
inline void robot_msg::set_idx(int64_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:robot_msg.idx)
}

// repeated float lidar_data = 2 [packed = true];
inline int robot_msg::_internal_lidar_data_size() const {
  return _impl_.lidar_data_.size();
}
inline int robot_msg::lidar_data_size() const {
  return _internal_lidar_data_size();
}
inline void robot_msg::clear_lidar_data() {
  _impl_.lidar_data_.Clear();
}
inline float robot_msg::_internal_lidar_data(int index) const {
  return _impl_.lidar_data_.Get(index);
}
inline float robot_msg::lidar_data(int index) const {
  // @@protoc_insertion_point(field_get:robot_msg.lidar_data)
  return _internal_lidar_data(index);
}
inline void robot_msg::set_lidar_data(int index, float value) {
  _impl_.lidar_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:robot_msg.lidar_data)
}
inline void robot_msg::_internal_add_lidar_data(float value) {
  _impl_.lidar_data_.Add(value);
}
inline void robot_msg::add_lidar_data(float value) {
  _internal_add_lidar_data(value);
  // @@protoc_insertion_point(field_add:robot_msg.lidar_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
robot_msg::_internal_lidar_data() const {
  return _impl_.lidar_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
robot_msg::lidar_data() const {
  // @@protoc_insertion_point(field_list:robot_msg.lidar_data)
  return _internal_lidar_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
robot_msg::_internal_mutable_lidar_data() {
  return &_impl_.lidar_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
robot_msg::mutable_lidar_data() {
  // @@protoc_insertion_point(field_mutable_list:robot_msg.lidar_data)
  return _internal_mutable_lidar_data();
}

// optional float distance_length = 3;
inline bool robot_msg::_internal_has_distance_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool robot_msg::has_distance_length() const {
  return _internal_has_distance_length();
}
inline void robot_msg::clear_distance_length() {
  _impl_.distance_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float robot_msg::_internal_distance_length() const {
  return _impl_.distance_length_;
}
inline float robot_msg::distance_length() const {
  // @@protoc_insertion_point(field_get:robot_msg.distance_length)
  return _internal_distance_length();
}
inline void robot_msg::_internal_set_distance_length(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_length_ = value;
}
inline void robot_msg::set_distance_length(float value) {
  _internal_set_distance_length(value);
  // @@protoc_insertion_point(field_set:robot_msg.distance_length)
}

// optional float angular_length = 4;
inline bool robot_msg::_internal_has_angular_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool robot_msg::has_angular_length() const {
  return _internal_has_angular_length();
}
inline void robot_msg::clear_angular_length() {
  _impl_.angular_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float robot_msg::_internal_angular_length() const {
  return _impl_.angular_length_;
}
inline float robot_msg::angular_length() const {
  // @@protoc_insertion_point(field_get:robot_msg.angular_length)
  return _internal_angular_length();
}
inline void robot_msg::_internal_set_angular_length(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.angular_length_ = value;
}
inline void robot_msg::set_angular_length(float value) {
  _internal_set_angular_length(value);
  // @@protoc_insertion_point(field_set:robot_msg.angular_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fvec_2eproto
