// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_vec.proto

#include "message_vec.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR start_agent_msg::start_agent_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.agent_state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idx_)*/int64_t{0}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.target_x_)*/0
  , /*decltype(_impl_.target_y_)*/0
  , /*decltype(_impl_.target_z_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.max_steps_)*/0
  , /*decltype(_impl_.lidar_for_state_)*/0} {}
struct start_agent_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR start_agent_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~start_agent_msgDefaultTypeInternal() {}
  union {
    start_agent_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 start_agent_msgDefaultTypeInternal _start_agent_msg_default_instance_;
PROTOBUF_CONSTEXPR step_agent_msg::step_agent_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.idx_)*/int64_t{0}
  , /*decltype(_impl_.act_0_)*/0
  , /*decltype(_impl_.act_1_)*/0} {}
struct step_agent_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR step_agent_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~step_agent_msgDefaultTypeInternal() {}
  union {
    step_agent_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 step_agent_msgDefaultTypeInternal _step_agent_msg_default_instance_;
PROTOBUF_CONSTEXPR robot_msg::robot_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lidar_data_)*/{}
  , /*decltype(_impl_.idx_)*/int64_t{0}
  , /*decltype(_impl_.distance_length_)*/0
  , /*decltype(_impl_.angular_length_)*/0} {}
struct robot_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR robot_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~robot_msgDefaultTypeInternal() {}
  union {
    robot_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 robot_msgDefaultTypeInternal _robot_msg_default_instance_;
static ::_pb::Metadata file_level_metadata_message_5fvec_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_5fvec_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_5fvec_2eproto = nullptr;

const uint32_t TableStruct_message_5fvec_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.agent_state_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.target_x_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.target_y_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.target_z_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.max_steps_),
  PROTOBUF_FIELD_OFFSET(::start_agent_msg, _impl_.lidar_for_state_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::step_agent_msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::step_agent_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::step_agent_msg, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::step_agent_msg, _impl_.act_0_),
  PROTOBUF_FIELD_OFFSET(::step_agent_msg, _impl_.act_1_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::robot_msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::robot_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::robot_msg, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::robot_msg, _impl_.lidar_data_),
  PROTOBUF_FIELD_OFFSET(::robot_msg, _impl_.distance_length_),
  PROTOBUF_FIELD_OFFSET(::robot_msg, _impl_.angular_length_),
  0,
  ~0u,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::start_agent_msg)},
  { 28, 37, -1, sizeof(::step_agent_msg)},
  { 40, 50, -1, sizeof(::robot_msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_start_agent_msg_default_instance_._instance,
  &::_step_agent_msg_default_instance_._instance,
  &::_robot_msg_default_instance_._instance,
};

const char descriptor_table_protodef_message_5fvec_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021message_vec.proto\"\371\002\n\017start_agent_msg\022"
  "\020\n\003idx\030\001 \001(\003H\000\210\001\001\022\030\n\013agent_state\030\002 \001(\tH\001"
  "\210\001\001\022\016\n\001x\030\003 \001(\002H\002\210\001\001\022\016\n\001y\030\004 \001(\002H\003\210\001\001\022\016\n\001z"
  "\030\005 \001(\002H\004\210\001\001\022\025\n\010target_x\030\006 \001(\002H\005\210\001\001\022\025\n\010ta"
  "rget_y\030\007 \001(\002H\006\210\001\001\022\025\n\010target_z\030\010 \001(\002H\007\210\001\001"
  "\022\022\n\005angle\030\t \001(\002H\010\210\001\001\022\026\n\tmax_steps\030\n \001(\005H"
  "\t\210\001\001\022\034\n\017lidar_for_state\030\013 \001(\005H\n\210\001\001B\006\n\004_i"
  "dxB\016\n\014_agent_stateB\004\n\002_xB\004\n\002_yB\004\n\002_zB\013\n\t"
  "_target_xB\013\n\t_target_yB\013\n\t_target_zB\010\n\006_"
  "angleB\014\n\n_max_stepsB\022\n\020_lidar_for_state\""
  "f\n\016step_agent_msg\022\020\n\003idx\030\001 \001(\003H\000\210\001\001\022\022\n\005a"
  "ct_0\030\002 \001(\002H\001\210\001\001\022\022\n\005act_1\030\003 \001(\002H\002\210\001\001B\006\n\004_"
  "idxB\010\n\006_act_0B\010\n\006_act_1\"\237\001\n\trobot_msg\022\020\n"
  "\003idx\030\001 \001(\003H\000\210\001\001\022\026\n\nlidar_data\030\002 \003(\002B\002\020\001\022"
  "\034\n\017distance_length\030\003 \001(\002H\001\210\001\001\022\033\n\016angular"
  "_length\030\004 \001(\002H\002\210\001\001B\006\n\004_idxB\022\n\020_distance_"
  "lengthB\021\n\017_angular_lengthb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_message_5fvec_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_5fvec_2eproto = {
    false, false, 673, descriptor_table_protodef_message_5fvec_2eproto,
    "message_vec.proto",
    &descriptor_table_message_5fvec_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_message_5fvec_2eproto::offsets,
    file_level_metadata_message_5fvec_2eproto, file_level_enum_descriptors_message_5fvec_2eproto,
    file_level_service_descriptors_message_5fvec_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_5fvec_2eproto_getter() {
  return &descriptor_table_message_5fvec_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_5fvec_2eproto(&descriptor_table_message_5fvec_2eproto);

// ===================================================================

class start_agent_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<start_agent_msg>()._impl_._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_agent_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_z(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lidar_for_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

start_agent_msg::start_agent_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:start_agent_msg)
}
start_agent_msg::start_agent_msg(const start_agent_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  start_agent_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.agent_state_){}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.target_x_){}
    , decltype(_impl_.target_y_){}
    , decltype(_impl_.target_z_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.max_steps_){}
    , decltype(_impl_.lidar_for_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.agent_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_agent_state()) {
    _this->_impl_.agent_state_.Set(from._internal_agent_state(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.idx_, &from._impl_.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lidar_for_state_) -
    reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.lidar_for_state_));
  // @@protoc_insertion_point(copy_constructor:start_agent_msg)
}

inline void start_agent_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.agent_state_){}
    , decltype(_impl_.idx_){int64_t{0}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.target_x_){0}
    , decltype(_impl_.target_y_){0}
    , decltype(_impl_.target_z_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.max_steps_){0}
    , decltype(_impl_.lidar_for_state_){0}
  };
  _impl_.agent_state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agent_state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

start_agent_msg::~start_agent_msg() {
  // @@protoc_insertion_point(destructor:start_agent_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void start_agent_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agent_state_.Destroy();
}

void start_agent_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void start_agent_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:start_agent_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.agent_state_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_z_) -
        reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.target_z_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lidar_for_state_) -
        reinterpret_cast<char*>(&_impl_.angle_)) + sizeof(_impl_.lidar_for_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* start_agent_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string agent_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_agent_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "start_agent_msg.agent_state"));
        } else
          goto handle_unusual;
        continue;
      // optional float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float target_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_target_x(&has_bits);
          _impl_.target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float target_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_target_y(&has_bits);
          _impl_.target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float target_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_target_z(&has_bits);
          _impl_.target_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_angle(&has_bits);
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_steps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_max_steps(&has_bits);
          _impl_.max_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lidar_for_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_lidar_for_state(&has_bits);
          _impl_.lidar_for_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* start_agent_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:start_agent_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 idx = 1;
  if (_internal_has_idx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_idx(), target);
  }

  // optional string agent_state = 2;
  if (_internal_has_agent_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_state().data(), static_cast<int>(this->_internal_agent_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "start_agent_msg.agent_state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agent_state(), target);
  }

  // optional float x = 3;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // optional float y = 4;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float z = 5;
  if (_internal_has_z()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // optional float target_x = 6;
  if (_internal_has_target_x()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_target_x(), target);
  }

  // optional float target_y = 7;
  if (_internal_has_target_y()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_target_y(), target);
  }

  // optional float target_z = 8;
  if (_internal_has_target_z()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_target_z(), target);
  }

  // optional float angle = 9;
  if (_internal_has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_angle(), target);
  }

  // optional int32 max_steps = 10;
  if (_internal_has_max_steps()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_max_steps(), target);
  }

  // optional int32 lidar_for_state = 11;
  if (_internal_has_lidar_for_state()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_lidar_for_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:start_agent_msg)
  return target;
}

size_t start_agent_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:start_agent_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string agent_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_agent_state());
    }

    // optional int64 idx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_idx());
    }

    // optional float x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float target_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float target_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float target_z = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float angle = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional int32 max_steps = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_steps());
    }

    // optional int32 lidar_for_state = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lidar_for_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData start_agent_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    start_agent_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*start_agent_msg::GetClassData() const { return &_class_data_; }


void start_agent_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<start_agent_msg*>(&to_msg);
  auto& from = static_cast<const start_agent_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:start_agent_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_agent_state(from._internal_agent_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.target_x_ = from._impl_.target_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.target_y_ = from._impl_.target_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.target_z_ = from._impl_.target_z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.angle_ = from._impl_.angle_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_steps_ = from._impl_.max_steps_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lidar_for_state_ = from._impl_.lidar_for_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void start_agent_msg::CopyFrom(const start_agent_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:start_agent_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool start_agent_msg::IsInitialized() const {
  return true;
}

void start_agent_msg::InternalSwap(start_agent_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agent_state_, lhs_arena,
      &other->_impl_.agent_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(start_agent_msg, _impl_.lidar_for_state_)
      + sizeof(start_agent_msg::_impl_.lidar_for_state_)
      - PROTOBUF_FIELD_OFFSET(start_agent_msg, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata start_agent_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fvec_2eproto_getter, &descriptor_table_message_5fvec_2eproto_once,
      file_level_metadata_message_5fvec_2eproto[0]);
}

// ===================================================================

class step_agent_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<step_agent_msg>()._impl_._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_act_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_act_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

step_agent_msg::step_agent_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:step_agent_msg)
}
step_agent_msg::step_agent_msg(const step_agent_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  step_agent_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.act_0_){}
    , decltype(_impl_.act_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.idx_, &from._impl_.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_1_) -
    reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.act_1_));
  // @@protoc_insertion_point(copy_constructor:step_agent_msg)
}

inline void step_agent_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.idx_){int64_t{0}}
    , decltype(_impl_.act_0_){0}
    , decltype(_impl_.act_1_){0}
  };
}

step_agent_msg::~step_agent_msg() {
  // @@protoc_insertion_point(destructor:step_agent_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void step_agent_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void step_agent_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void step_agent_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:step_agent_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.act_1_) -
        reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.act_1_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* step_agent_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float act_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_act_0(&has_bits);
          _impl_.act_0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float act_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_act_1(&has_bits);
          _impl_.act_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* step_agent_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:step_agent_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 idx = 1;
  if (_internal_has_idx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_idx(), target);
  }

  // optional float act_0 = 2;
  if (_internal_has_act_0()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_act_0(), target);
  }

  // optional float act_1 = 3;
  if (_internal_has_act_1()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_act_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:step_agent_msg)
  return target;
}

size_t step_agent_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:step_agent_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_idx());
    }

    // optional float act_0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float act_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData step_agent_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    step_agent_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*step_agent_msg::GetClassData() const { return &_class_data_; }


void step_agent_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<step_agent_msg*>(&to_msg);
  auto& from = static_cast<const step_agent_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:step_agent_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.act_0_ = from._impl_.act_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.act_1_ = from._impl_.act_1_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void step_agent_msg::CopyFrom(const step_agent_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:step_agent_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool step_agent_msg::IsInitialized() const {
  return true;
}

void step_agent_msg::InternalSwap(step_agent_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(step_agent_msg, _impl_.act_1_)
      + sizeof(step_agent_msg::_impl_.act_1_)
      - PROTOBUF_FIELD_OFFSET(step_agent_msg, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata step_agent_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fvec_2eproto_getter, &descriptor_table_message_5fvec_2eproto_once,
      file_level_metadata_message_5fvec_2eproto[1]);
}

// ===================================================================

class robot_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<robot_msg>()._impl_._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angular_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

robot_msg::robot_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:robot_msg)
}
robot_msg::robot_msg(const robot_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  robot_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lidar_data_){from._impl_.lidar_data_}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.distance_length_){}
    , decltype(_impl_.angular_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.idx_, &from._impl_.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.angular_length_) -
    reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.angular_length_));
  // @@protoc_insertion_point(copy_constructor:robot_msg)
}

inline void robot_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lidar_data_){arena}
    , decltype(_impl_.idx_){int64_t{0}}
    , decltype(_impl_.distance_length_){0}
    , decltype(_impl_.angular_length_){0}
  };
}

robot_msg::~robot_msg() {
  // @@protoc_insertion_point(destructor:robot_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void robot_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lidar_data_.~RepeatedField();
}

void robot_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void robot_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lidar_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.angular_length_) -
        reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.angular_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* robot_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float lidar_data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_lidar_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_lidar_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float distance_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_distance_length(&has_bits);
          _impl_.distance_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float angular_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_angular_length(&has_bits);
          _impl_.angular_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* robot_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 idx = 1;
  if (_internal_has_idx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_idx(), target);
  }

  // repeated float lidar_data = 2 [packed = true];
  if (this->_internal_lidar_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_lidar_data(), target);
  }

  // optional float distance_length = 3;
  if (_internal_has_distance_length()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_distance_length(), target);
  }

  // optional float angular_length = 4;
  if (_internal_has_angular_length()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_angular_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_msg)
  return target;
}

size_t robot_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float lidar_data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lidar_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_idx());
    }

    // optional float distance_length = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float angular_length = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData robot_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    robot_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*robot_msg::GetClassData() const { return &_class_data_; }


void robot_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<robot_msg*>(&to_msg);
  auto& from = static_cast<const robot_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:robot_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lidar_data_.MergeFrom(from._impl_.lidar_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.distance_length_ = from._impl_.distance_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.angular_length_ = from._impl_.angular_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void robot_msg::CopyFrom(const robot_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool robot_msg::IsInitialized() const {
  return true;
}

void robot_msg::InternalSwap(robot_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lidar_data_.InternalSwap(&other->_impl_.lidar_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(robot_msg, _impl_.angular_length_)
      + sizeof(robot_msg::_impl_.angular_length_)
      - PROTOBUF_FIELD_OFFSET(robot_msg, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata robot_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fvec_2eproto_getter, &descriptor_table_message_5fvec_2eproto_once,
      file_level_metadata_message_5fvec_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::start_agent_msg*
Arena::CreateMaybeMessage< ::start_agent_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::start_agent_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::step_agent_msg*
Arena::CreateMaybeMessage< ::step_agent_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::step_agent_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::robot_msg*
Arena::CreateMaybeMessage< ::robot_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
