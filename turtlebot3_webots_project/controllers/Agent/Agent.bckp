"""Agent controller."""

# You may need to import some classes of the controller module. Ex:
#  from controller import Robot, Motor, DistanceSensor
from controller import Robot, Supervisor
from controller import emitter, receiver
from controller import AnsiCodes

# Gymnasium Library module
import gymnasium as gym

import numpy as np

# protobuf and zmq library
import zmq
from Robo_Subscriber import RobotSubscriber
from Agent_Publisher import AgentPublisher

import sys
from typing import *
from types import SimpleNamespace

# for prettier logging on terminal
def logger(mode, 
           head_name: Optional[str] = None, 
           str_name: str = ""):
    if ("info" in mode):
        head = AnsiCodes.BLUE_BACKGROUND
    elif ("warn" in mode):
        head = AnsiCodes.YELLOW_BACKGROUND
    elif ("err" in mode):
        head = AnsiCodes.RED_BACKGROUND
    elif ("custom" in mode):
        head = AnsiCodes.MAGENTA_BACKGROUND
    elif ("hidden" in mode):
        head = AnsiCodes.GREEN_BACKGROUND
    elif ("none" in mode):
        head = ''
    
    if(head_name is None):
        print(head + f"{str_name}" + AnsiCodes.RESET)
    else:
        # tab_times = 2-(int((len(head_name))/9))
        tab_times = 2 if len(head_name) < 10 else 1
        print(head + f"[{head_name}]" + AnsiCodes.RESET + "\t"*tab_times + str_name)

class Agent(gym.Env, Supervisor):

    def __init__(self, 
                 agent_settings,
                 scene_configuration,
                 verbose: Optional[bool]=False):
       
        self.seed = None
        
        head_name = "TB3Py_Init"
        self.agent = Supervisor()
        self.timestep = int(self.agent.getBasicTimeStep())
        logger("info", head_name, f"webots timestep: {self.timestep}")

        #read agent settings for supporting algorithm list
        self.agent_settings = self.read_agent_settings(agent_settings, verbose=verbose)

        #read scene configuration
        self.scene_cfg = self.read_scene_configuration(scene_configuration, verbose=verbose)

        # get info node
        self.agent_node, self.target_node, self.info_node = self.read_webots_node(verbose=verbose)

        #get info node
        self.world_title = self.info_node.getField("title").getSFString()
        logger("info", "title_init", f"world title : {self.world_title}")

        #gym environment action setup (action space) [linear vel, angular vel]
        action_low = np.array([-1.0]*2, dtype=np.float32)
        action_high = np.array([1.0]*2, dtype=np.float32)
        self.action_space = gym.spaces.Box(low=action_low, high=action_high)
        
        #gym environment state setup (observation space) [lidar_state*10, d_goal, theta_goal] (only 12 state)
        observation_low = np.array([0.12]*self.agent_settings.lidar_for_state + [0.0, -np.pi], dtype=np.float32)
        observation_high = np.array([10.0]*self.agent_settings.lidar_for_state + [10.0, np.pi], dtype=np.float32)
        self.observation_space = gym.spaces.Box(low=observation_low, high=observation_high)

        #initialize emitter and receiver
        # self.initialize_emitter(verbose=verbose)
        # self.initialize_receiver(verbose=verbose)
        # self.key_emitter = 2525
        # self.key_emitter_success = 25
        # self.key_receiver = 2323
        # self.key_receiver_success = 23
        # # self.str_emitter = ""   # we don't need this because directly use message params
        # self.str_receiver = ""

    # def read_shared_mem(self):
    #     key_exist = False
    #     while(key_exist==False):
    #         try:
    #             shm = sysv_ipc.SharedMemory(self.key_receiver)
    #             key_exist=True
    #         except sysv_ipc.ExistentialError:
    #             time.sleep(0.01)        # wait 1ms
    #     self.str_receiver = shm.read(1024).decode().strip('\x00')
    #     #detach the shared memory
    #     shm.detach()
    #     #after memory read not need to be clear

    # def write_shared_mem(self, message:str=None):
    #     key_exist = False
    #     if(self.first_time_init_mem):
    #         shm = sysv_ipc.SharedMemory(self.key_emitter, sysv_ipc.IPC_CREAT, size=1024)
    #         shm2 = sysv_ipc.SharedMemory(self.key_emitter_success, sysv_ipc.IPC_CREAT, size=1024))
    #         self.first_time_init_mem = False
    #     else:
    #         while(key_exist==False):
    #             try:
    #                 shm = sysv_ipc.SharedMemory(self.key_emitter)
    #                 shm2 = sysv_ipc.SharedMemory(self.key_emitter_success)
    #                 key_exist=True
    #             except sysv_ipc.ExistentialError:
    #                 time.sleep(0.01)        # wait 1ms
    #     shm.write(message.encode())
    #     shm2.write("false".encode())
    #     #detach the shared memory
    #     shm.detach()
    #     shm2.detach()

    def read_webots_node(self, verbose=False):
        head_name = "TB3Py_read_node"
        info_node = self.agent.getFromDef("WorldInfo")
        if info_node is None:
            logger("error", head_name, "No WorldInfo node found in the current world file\n")
            sys.exit(1)
        else:
            logger("info", head_name, "WorldInfo node def found")
        agent_node = self.agent.getFromDef("Agent") # def name is Agent
        if agent_node is None:
            logger("error", head_name, "No DEF Agent node found in the current world file\n")
            sys.exit(1)
        else:
            logger("info", head_name, "Box Agent node def found")
        # initialize target ball node
        target_node = self.agent.getFromDef("target_ball") # DEF name is target_ball
        if target_node is None:
            logger("error", head_name, "No target ball node found in the current world file\n")
            sys.exit(1)
        else:
            logger("info", head_name, "target ball node def found")  
        
        return agent_node, target_node, info_node

    def read_agent_settings(self, agent_settings, verbose):
        head_name = "TB3Py_agent_cfg"
        settings_namespace = SimpleNamespace(**agent_settings)
        if(verbose):
            for key, val in agent_settings.items():
                logger("info", head_name, f"{key} :\t{val}")
        return settings_namespace    
    
    def read_scene_configuration(self, scene_configuration, verbose):
        head_name = "TB3Py_scene_cfg"
        scene_config_namespace = SimpleNamespace(**scene_configuration)
        if(verbose):
            for key, val in scene_configuration.items():
                logger("info", head_name, f"{key}: \t{val}")
        return scene_config_namespace

    def step(self, action):
        # self.read_shared_mem()
        # #the c++ agent must send back 13 state
        # #so char_total = 4+(13*(7+1)) = 108 char communication
        # # 4  -> char step 1-1024
        # # 7  -> char -00.000 + "_"
        # # 13 -> state
        # print(self.str_receiver.split('_'))
        pass

    def reset(self, seed: Optional[int]=1):
        pass

if __name__ == "__main__":
    agent_settings = {"goal_dist": 0.11, # in meter
                      "collision_dist": 0.12, # in meter
                      "lidar_for_state": 10,  # number of state lidar read
                      }  
    scene_configuration = {"change_scene_every_goal_reach": 1, # change the scenario every n goal reach
                           "scene_start_from": 0, # scene start from n
                           "random_start": False, # whether start from x and y coordinate random or not
                           "max_steps": 1024,
                          }
    roboAgent = Agent(agent_settings,
                      scene_configuration,
                      verbose=True)
    
    while(roboAgent.agent.step()!=-1):
        pass
    
